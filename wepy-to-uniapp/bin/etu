#! /usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const path = require('path');
const fs = require('fs');

const transform = require('../src/index');
const { log } = require('../src/utils/utils');
const pkg = require('../package.json');

process.on('exit', () => console.log());

program
    .version(pkg.version)
    .usage('[options]')
    .option('-i, --input', 'the input path for weixin miniprogram project')
    .option('-o, --output <value>', 'the output path for uni-app project, which default value is process.cwd()', "")
    .parse(process.argv);

program.on('--help', function () {
    console.log();
    console.log('  Examples:');
    console.log();
    console.log(chalk.gray('    # transform a weixin miniprogram project to uni-app project'));
    console.log();
    console.log('    $ etu -i ./miniprogramProject -o ./miniprogramProject_uni');
    console.log();
}); 



function help () {
    if (program.args.length < 1) {
        return program.help();
    }
}

help();

let src = program.args[0];
let dist = program.output;

src = path.resolve(process.cwd(), src);

if (!fs.existsSync(src)) {
    log(`The source folder dose not exist: ${src}`);
    process.exit();
}

function removeDir(dir) {
    return new Promise(function (resolve, reject) {
        //先读文件夹
        fs.stat(dir,function (err, stat) {
        if(stat.isDirectory()){
            fs.readdir(dir,function (err, files) {
            files = files.map(file=>path.join(dir,file)); // a/b  a/m
            files = files.map(file=>removePromise(file)); //这时候变成了promise
            Promise.all(files).then(function () {
                fs.rmdir(dir,resolve);
            })
            })
        }else {
            fs.unlink(dir,resolve)
        }
        })
    })
}
  
if (!fs.existsSync(dist)) {
    transform(src, dist);
} else {
    removeDir(dist).then(() => {
        console.log('删除成功')
        transform(src, dist);
    }).then(() => {
        console.log('编译成功')
    })
}
